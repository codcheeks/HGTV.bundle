def NormalizeURL(url):
  return url

####################################################################################################

def getItemInfo(url,itemInfo):
	
	videoId = url.split('videoId=')[1].split('&')[0]
	showId = url.split('showId=')[1]

	Log("Gerk: testURL: %s",url)

	# NB: must do it this way as the first line of their xml is a carriage return (which makes it invalid)
	xmlcontent = HTTP.Request('http://www.hgtv.com/hgtv/channel/xml/0,,%s,00.xml' % showId).content.strip()
		
	for c in XML.ElementFromString(xmlcontent).xpath("//video"):
 		# only process our given videoId
 		thisVideoId = c.xpath("videoId")[0].text
 		if thisVideoId == videoId:
 			title = c.xpath("./clipName")[0].text
 			Log("Gerk: videoUrl: %s",c.xpath("./videoUrl")[0].text)
 			url = c.xpath("./videoUrl")[0].text.replace('http://wms','rtmp://flash').replace('.wmv','').replace('scrippsnetworks.com/','scrippsnetworks.com/ondemand/&').split('&')
 			Log("Gerk: url: %s",url)
 
 			if itemInfo == "Metadata":
 				duration = GetDurationFromString(c.xpath("length")[0].text)
 				desc = c.xpath("abstract")[0].text
 				thumb = c.xpath("thumbnailUrl")[0].text	
 
 				md = {"title":title,"summary":summary,"duration":duration,"show":show_title}
 				
				return EpisodeObject(
					title = md['title'],
					summary = md['summary'],
					duration = md['duration'],
					show = md['show_title']
				)
 			elif itemInfo == "MediaObject":
 				#return url
 				return [
 					MediaObject(
 						parts = [PartObject(key=RTMPVideoURL(url=url[0], clip=url[1]))]
 					)
 				]


def MetadataObjectForURL(url):
	return getItemInfo(url,'Metadata')


####################################################################################################
def MediaObjectsForURL(url):
	return getItemInfo(url,'MediaObject')
	

####################################################################################################
def TestURLs():
	# due to the nature of pulling these here are just some random static ones
	# hopefully these shows will stay around for the tester to work :/
	test_urls = []
	test.urls.append('http://www.hgtv.com/video/?videoId=94162&showId=56323')
	test_urls.append('http://www.hgtv.com/video/?videoId=46236&showId=32481')
	test_urls.append('http://www.hgtv.com/video/?videoId=85581&showId=42421')
	test_urls.append('http://www.hgtv.com/video/?videoId=39781&showId=21121')
	test_urls.append('http://www.hgtv.com/video/?videoId=57984&showId=36706')
	test_urls.append('http://www.hgtv.com/video/?videoId=54305&showId=12423')
	test_urls.append('http://www.hgtv.com/video/?videoId=98041&showId=64962')
	return test_urls


def GetDurationFromString(duration):

	try:
		durationArray = duration.split(":")

		if len(durationArray) == 3:
			hours = int(durationArray[0])
			minutes = int(durationArray[1])
			seconds = int(durationArray[2])
		elif len(durationArray) == 2:
			hours = 0
			minutes = int(durationArray[0])
			seconds = int(durationArray[1])
		elif len(durationArray)	==	1:
			hours = 0
			minutes = 0
			seconds = int(durationArray[0])

		return int(((hours)*3600 + (minutes*60) + seconds)*1000)

	except:
		return 0